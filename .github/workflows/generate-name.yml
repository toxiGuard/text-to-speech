name: Generate Name and Save to MongoDB

on:
  workflow_dispatch:
    inputs:
      episode_id:
        description: 'ID for the episode'
        required: true
        default: '123'
      prompt:
        description: 'Speech prompt to synthesize'
        required: true
        default: 'Hello, how are you?'

jobs:
  synthesize_speech:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.0'

      - name: Print environment variables
        run: |
          printenv  # This will print all environment variables except secrets

      # Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      # Cache ffmpeg by downloading it only if not cached
      - name: Cache ffmpeg installation
        id: ffmpeg_cache
        run: |
          if ! [ -d "/usr/local/bin/ffmpeg" ]; then
            echo "Installing ffmpeg"
            sudo apt-get update
            sudo apt-get install -y ffmpeg
          else
            echo "ffmpeg already installed, skipping..."
          fi

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Python script to generate text to speech and save to MongoDB
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}  
          SPEECH_KEY: ${{ secrets.SPEECH_KEY }}  
          SPEECH_REGION: ${{ secrets.SPEECH_REGION }}  
          EPISODE_ID: ${{ github.event.inputs.episode_id }}
          PROMPT: ${{ github.event.inputs.prompt }}
        run: |
          python synthesize_speech.py
